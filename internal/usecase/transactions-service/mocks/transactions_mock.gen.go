// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/romanpitatelev/wallets-service/internal/entity"
)

// MockwalletsStore is a mock of walletsStore interface.
type MockwalletsStore struct {
	ctrl     *gomock.Controller
	recorder *MockwalletsStoreMockRecorder
}

// MockwalletsStoreMockRecorder is the mock recorder for MockwalletsStore.
type MockwalletsStoreMockRecorder struct {
	mock *MockwalletsStore
}

// NewMockwalletsStore creates a new mock instance.
func NewMockwalletsStore(ctrl *gomock.Controller) *MockwalletsStore {
	mock := &MockwalletsStore{ctrl: ctrl}
	mock.recorder = &MockwalletsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwalletsStore) EXPECT() *MockwalletsStoreMockRecorder {
	return m.recorder
}

// GetWallet mocks base method.
func (m *MockwalletsStore) GetWallet(ctx context.Context, walletID entity.WalletID, userID entity.UserID) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, walletID, userID)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockwalletsStoreMockRecorder) GetWallet(ctx, walletID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockwalletsStore)(nil).GetWallet), ctx, walletID, userID)
}

// MocktransactionsStore is a mock of transactionsStore interface.
type MocktransactionsStore struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionsStoreMockRecorder
}

// MocktransactionsStoreMockRecorder is the mock recorder for MocktransactionsStore.
type MocktransactionsStoreMockRecorder struct {
	mock *MocktransactionsStore
}

// NewMocktransactionsStore creates a new mock instance.
func NewMocktransactionsStore(ctrl *gomock.Controller) *MocktransactionsStore {
	mock := &MocktransactionsStore{ctrl: ctrl}
	mock.recorder = &MocktransactionsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionsStore) EXPECT() *MocktransactionsStoreMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MocktransactionsStore) Deposit(ctx context.Context, transaction entity.Transaction, userID entity.UserID, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, transaction, userID, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MocktransactionsStoreMockRecorder) Deposit(ctx, transaction, userID, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MocktransactionsStore)(nil).Deposit), ctx, transaction, userID, rate)
}

// GetTransactions mocks base method.
func (m *MocktransactionsStore) GetTransactions(ctx context.Context, request entity.GetWalletsRequest, walletID entity.WalletID, userID entity.UserID) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, request, walletID, userID)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MocktransactionsStoreMockRecorder) GetTransactions(ctx, request, walletID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MocktransactionsStore)(nil).GetTransactions), ctx, request, walletID, userID)
}

// Transfer mocks base method.
func (m *MocktransactionsStore) Transfer(ctx context.Context, transaction entity.Transaction, userID entity.UserID, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, transaction, userID, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MocktransactionsStoreMockRecorder) Transfer(ctx, transaction, userID, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MocktransactionsStore)(nil).Transfer), ctx, transaction, userID, rate)
}

// Withdraw mocks base method.
func (m *MocktransactionsStore) Withdraw(ctx context.Context, transaction entity.Transaction, userID entity.UserID, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, transaction, userID, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MocktransactionsStoreMockRecorder) Withdraw(ctx, transaction, userID, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MocktransactionsStore)(nil).Withdraw), ctx, transaction, userID, rate)
}

// Mocktx is a mock of tx interface.
type Mocktx struct {
	ctrl     *gomock.Controller
	recorder *MocktxMockRecorder
}

// MocktxMockRecorder is the mock recorder for Mocktx.
type MocktxMockRecorder struct {
	mock *Mocktx
}

// NewMocktx creates a new mock instance.
func NewMocktx(ctrl *gomock.Controller) *Mocktx {
	mock := &Mocktx{ctrl: ctrl}
	mock.recorder = &MocktxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktx) EXPECT() *MocktxMockRecorder {
	return m.recorder
}

// DoWithTx mocks base method.
func (m *Mocktx) DoWithTx(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoWithTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoWithTx indicates an expected call of DoWithTx.
func (mr *MocktxMockRecorder) DoWithTx(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWithTx", reflect.TypeOf((*Mocktx)(nil).DoWithTx), ctx, fn)
}

// MockxrClient is a mock of xrClient interface.
type MockxrClient struct {
	ctrl     *gomock.Controller
	recorder *MockxrClientMockRecorder
}

// MockxrClientMockRecorder is the mock recorder for MockxrClient.
type MockxrClientMockRecorder struct {
	mock *MockxrClient
}

// NewMockxrClient creates a new mock instance.
func NewMockxrClient(ctrl *gomock.Controller) *MockxrClient {
	mock := &MockxrClient{ctrl: ctrl}
	mock.recorder = &MockxrClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockxrClient) EXPECT() *MockxrClientMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockxrClient) GetRate(ctx context.Context, from, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", ctx, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockxrClientMockRecorder) GetRate(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockxrClient)(nil).GetRate), ctx, from, to)
}

// MocktxProducer is a mock of txProducer interface.
type MocktxProducer struct {
	ctrl     *gomock.Controller
	recorder *MocktxProducerMockRecorder
}

// MocktxProducerMockRecorder is the mock recorder for MocktxProducer.
type MocktxProducerMockRecorder struct {
	mock *MocktxProducer
}

// NewMocktxProducer creates a new mock instance.
func NewMocktxProducer(ctrl *gomock.Controller) *MocktxProducer {
	mock := &MocktxProducer{ctrl: ctrl}
	mock.recorder = &MocktxProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxProducer) EXPECT() *MocktxProducerMockRecorder {
	return m.recorder
}

// ProduceTxToKafka mocks base method.
func (m *MocktxProducer) ProduceTxToKafka(transaction entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceTxToKafka", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceTxToKafka indicates an expected call of ProduceTxToKafka.
func (mr *MocktxProducerMockRecorder) ProduceTxToKafka(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceTxToKafka", reflect.TypeOf((*MocktxProducer)(nil).ProduceTxToKafka), transaction)
}
