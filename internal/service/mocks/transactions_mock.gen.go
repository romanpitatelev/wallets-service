// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/romanpitatelev/wallets-service/internal/models"
)

// MockwalletStore is a mock of walletStore interface.
type MockwalletStore struct {
	ctrl     *gomock.Controller
	recorder *MockwalletStoreMockRecorder
}

// MockwalletStoreMockRecorder is the mock recorder for MockwalletStore.
type MockwalletStoreMockRecorder struct {
	mock *MockwalletStore
}

// NewMockwalletStore creates a new mock instance.
func NewMockwalletStore(ctrl *gomock.Controller) *MockwalletStore {
	mock := &MockwalletStore{ctrl: ctrl}
	mock.recorder = &MockwalletStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwalletStore) EXPECT() *MockwalletStoreMockRecorder {
	return m.recorder
}

// ArchiveStaleWallets mocks base method.
func (m *MockwalletStore) ArchiveStaleWallets(ctx context.Context, checkPeriod time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveStaleWallets", ctx, checkPeriod)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveStaleWallets indicates an expected call of ArchiveStaleWallets.
func (mr *MockwalletStoreMockRecorder) ArchiveStaleWallets(ctx, checkPeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveStaleWallets", reflect.TypeOf((*MockwalletStore)(nil).ArchiveStaleWallets), ctx, checkPeriod)
}

// CreateWallet mocks base method.
func (m *MockwalletStore) CreateWallet(ctx context.Context, wallet models.Wallet, userID uuid.UUID) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet, userID)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockwalletStoreMockRecorder) CreateWallet(ctx, wallet, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockwalletStore)(nil).CreateWallet), ctx, wallet, userID)
}

// DeleteWallet mocks base method.
func (m *MockwalletStore) DeleteWallet(ctx context.Context, walletID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", ctx, walletID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockwalletStoreMockRecorder) DeleteWallet(ctx, walletID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockwalletStore)(nil).DeleteWallet), ctx, walletID, userID)
}

// Deposit mocks base method.
func (m *MockwalletStore) Deposit(ctx context.Context, transaction models.Transaction, userID uuid.UUID, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, transaction, userID, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockwalletStoreMockRecorder) Deposit(ctx, transaction, userID, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockwalletStore)(nil).Deposit), ctx, transaction, userID, rate)
}

// DoWithTx mocks base method.
func (m *MockwalletStore) DoWithTx(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoWithTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoWithTx indicates an expected call of DoWithTx.
func (mr *MockwalletStoreMockRecorder) DoWithTx(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWithTx", reflect.TypeOf((*MockwalletStore)(nil).DoWithTx), ctx, fn)
}

// GetTransactions mocks base method.
func (m *MockwalletStore) GetTransactions(ctx context.Context, request models.GetWalletsRequest, walletID uuid.UUID) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, request, walletID)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockwalletStoreMockRecorder) GetTransactions(ctx, request, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockwalletStore)(nil).GetTransactions), ctx, request, walletID)
}

// GetWallet mocks base method.
func (m *MockwalletStore) GetWallet(ctx context.Context, walletID, userID uuid.UUID) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, walletID, userID)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockwalletStoreMockRecorder) GetWallet(ctx, walletID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockwalletStore)(nil).GetWallet), ctx, walletID, userID)
}

// GetWallets mocks base method.
func (m *MockwalletStore) GetWallets(ctx context.Context, request models.GetWalletsRequest, userID uuid.UUID) ([]models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets", ctx, request, userID)
	ret0, _ := ret[0].([]models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockwalletStoreMockRecorder) GetWallets(ctx, request, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockwalletStore)(nil).GetWallets), ctx, request, userID)
}

// Transfer mocks base method.
func (m *MockwalletStore) Transfer(ctx context.Context, transaction models.Transaction, userID uuid.UUID, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, transaction, userID, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockwalletStoreMockRecorder) Transfer(ctx, transaction, userID, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockwalletStore)(nil).Transfer), ctx, transaction, userID, rate)
}

// UpdateWallet mocks base method.
func (m *MockwalletStore) UpdateWallet(ctx context.Context, walletID uuid.UUID, updatedWallet models.WalletUpdate, rate float64, userID uuid.UUID) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, walletID, updatedWallet, rate, userID)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockwalletStoreMockRecorder) UpdateWallet(ctx, walletID, updatedWallet, rate, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockwalletStore)(nil).UpdateWallet), ctx, walletID, updatedWallet, rate, userID)
}

// Withdraw mocks base method.
func (m *MockwalletStore) Withdraw(ctx context.Context, transaction models.Transaction, userID uuid.UUID, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, transaction, userID, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockwalletStoreMockRecorder) Withdraw(ctx, transaction, userID, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockwalletStore)(nil).Withdraw), ctx, transaction, userID, rate)
}

// MockxrClient is a mock of xrClient interface.
type MockxrClient struct {
	ctrl     *gomock.Controller
	recorder *MockxrClientMockRecorder
}

// MockxrClientMockRecorder is the mock recorder for MockxrClient.
type MockxrClientMockRecorder struct {
	mock *MockxrClient
}

// NewMockxrClient creates a new mock instance.
func NewMockxrClient(ctrl *gomock.Controller) *MockxrClient {
	mock := &MockxrClient{ctrl: ctrl}
	mock.recorder = &MockxrClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockxrClient) EXPECT() *MockxrClientMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockxrClient) GetRate(ctx context.Context, from, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", ctx, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockxrClientMockRecorder) GetRate(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockxrClient)(nil).GetRate), ctx, from, to)
}

// MocktxProducer is a mock of txProducer interface.
type MocktxProducer struct {
	ctrl     *gomock.Controller
	recorder *MocktxProducerMockRecorder
}

// MocktxProducerMockRecorder is the mock recorder for MocktxProducer.
type MocktxProducerMockRecorder struct {
	mock *MocktxProducer
}

// NewMocktxProducer creates a new mock instance.
func NewMocktxProducer(ctrl *gomock.Controller) *MocktxProducer {
	mock := &MocktxProducer{ctrl: ctrl}
	mock.recorder = &MocktxProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxProducer) EXPECT() *MocktxProducerMockRecorder {
	return m.recorder
}

// ProduceTxToKafka mocks base method.
func (m *MocktxProducer) ProduceTxToKafka(transaction models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceTxToKafka", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceTxToKafka indicates an expected call of ProduceTxToKafka.
func (mr *MocktxProducerMockRecorder) ProduceTxToKafka(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceTxToKafka", reflect.TypeOf((*MocktxProducer)(nil).ProduceTxToKafka), transaction)
}
